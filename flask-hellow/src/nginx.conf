user  nginx;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
pid        /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #location = /hellow { rewrite ^ /hellow/; }
        #location /hellow { try_files $uri @hellow_app; }
        #location @hellow_app {
        location /hellow {
             proxy_pass       http://127.0.0.1:8001/;
             proxy_redirect   off;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

             # set next headers if are empty,
             #  avoiding overwriting from upstream proxy
             #proxy_set_header Host              $host;
             #proxy_set_header X-Real-IP         $remote_addr;
             #proxy_set_header X-Forwarded-Proto $scheme;
             rewrite_by_lua_block {
                 ss = ngx.req.get_headers()["X-Real-IP"];
                 if ss == nil or ss == "" then
                    ngx.req.set_header("X-Real-IP", ngx.var.remote_addr)
                    ngx.req.set_header("Host", ngx.var.host)
                    ngx.req.set_header("X-Forwarded-Proto", ngx.var.scheme)
                 end
             }
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
